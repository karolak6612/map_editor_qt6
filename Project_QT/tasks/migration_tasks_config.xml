<project_migration_tasks>

  <header>
    <title>Project Migration to Qt6 Framework - Task-Based Execution with Review</title>
    <auditor>User (Hiring Manager & Reviewer)</auditor>
    <coder>Jules</coder> <!-- Updated for context -->
    <date_issued>2025-05-28</date_issued> <!-- Kept user's updated date -->
    <version>1.3-Jules-Optimized</version> <!-- Reflects changes for Jules workflow -->
  </header>

  <introduction_and_setup>
    <greeting>
      Hello Jules! We're migrating to Qt6 with a task-based approach. You'll work on a local copy of the repo. I'll provide feedback via chat for each main task.
      I am the Auditor & Reviewer. Your role is the Coder.
    </greeting>
    <project_paths>
      <old_source_code_location>wxwidgets</old_source_code_location> <!-- Path relative to repo root -->
      <new_qt6_project_code_location>Project_QT/src</new_qt6_project_code_location> <!-- Path relative to repo root -->
    </project_paths>
    <git_repository_details>
        <repository_url>https://github.com/sword-of-fury/project_qt</repository_url>
        <main_branch>main</main_branch> <!-- Confirm this is your main development branch name -->
        <remote_name>origin</remote_name>
    </git_repository_details>
    <core_coding_mandates>
      <mandate id="M1">Provide all functional Qt6 code for the current task.</mandate>
      <mandate id="M2">100% complete and functional code for the current task. No snippets.</mandate>
      <mandate id="M3">All Qt6 code in `new_qt6_project_code_location` (i.e., `Project_QT/src`).</mandate>
      <mandate id="M4">Target Qt6, adhere to best practices.</mandate>
      <mandate id="M5">Reference `old_source_code_location` (i.e., `wxwidgets`) for original code, analyzing existing code in `Project_QT/src`.</mandate>
    </core_coding_mandates>
  </introduction_and_setup>

  <task_list>
    <!--
      Jules will identify tasks with status="PENDING" that have not yet been formally approved in the current session.
      The 'status' attribute itself is not dynamically updated by Jules in this file.
    -->
    <task id="Task1" status="PENDING" description="Systematically replace all instances and usages of `wxImage` with `QImage` throughout the `project_qt` codebase. Analyze existing code, ensure functional parity for loading, manipulation, and saving. Focus areas: `SpriteManager`, `ItemManager`, `ResourceManager`. This is a foundational graphics migration."/>
    <task id="Task2" status="PENDING" description="Replace all `wxBitmap` usages with `QPixmap` and adapt all related drawing code in `project_qt`. Analyze existing code, ensure efficient display in `MapView` and UI elements, and correct transparent background handling. This involves porting `wxImage` to `wxBitmap` (now `QImage` to `QPixmap`) conversions."/>
    <task id="Task3" status="PENDING" description="Replace all drawing operations involving `wxDC` (and derivatives) with `QPainter` equivalents in `project_qt`. Align all drawing logic with Qt's 2D painting system. Focus on accurate translation of primitives, text rendering, transformations, brush/pen, and clipping. This is a fundamental refactoring of all custom 2D rendering."/>
    <task id="Task4" status="PENDING" description="Migrate `wxPanel` classes that act as simple containers (minimal custom events/drawing) to Qt's `QWidget` or `QFrame`. Replace associated sizers (`wxBoxSizer`, etc.) with equivalent Qt layouts (`QVBoxLayout`, etc.). Ensure correct layout migration and widget hierarchy for visual parity."/>
    <task id="Task5" status="PENDING" description="Perform a complete migration of foundational mouse event handling (`wxMouseEvent`, `wxMouseWheelEvent`) from the primary map display component in `wxwidgets` to its Qt equivalent in `Project_QT/src` (`QMouseEvent`, `QWheelEvent`). Port related coordinate transformation methods (`ScreenToMap`, etc.) and view information access."/>
    <task id="Task6" status="PENDING" description="Refactor `Brush` subclasses (e.g., `NormalBrush`, `EraserBrush`) into full, separate classes in `project_qt`. Implement appropriate *stub* mouse event handlers using Qt's event system, primarily for identifying target tiles. Actual item creation/modification is deferred."/>
    <task id="Task7" status="PENDING" description="Migrate 'simple' `wxDialog` classes (straightforward UIs, standard buttons like OK/Cancel, minimal custom logic) to `QDialog`. Replicate UI layout and connect standard button signals to placeholder slots or `accept()`/`reject()`. Complex dialogs are deferred."/>
    <task id="Task8" status="PENDING" description="Migrate the entire `MainMenu` structure from `wxwidgets` to Qt, using `QMenuBar`, `QMenu`, and `QAction`. Replicate hierarchy, items, icons, shortcuts. Connect `QAction` signals to existing or new stub slots in `MainWindow`. Prioritize original ActionID usage for naming/identification."/>
    <task id="Task9" status="PENDING" description="Migrate the `MainToolBar` using `QToolBar`. Create `QAction`s with icons. Integrate basic zoom controls (`QSlider`/`QSpinBox`) and layer selector (`QComboBox`). Connect controls to placeholder slots in `MainWindow` for propagating changes. Handle conceptual `ToolBarID` logic."/>
    <task id="Task10" status="PENDING" description="Transform `wxAuiManager` dynamic window layouts to Qt's `QDockWidget` framework in `MainWindow` for core tool windows (palettes, minimap, propertiesDock, etc.). Implement basic dock behavior (show/hide, resize, float). Placeholder for layout saving/loading."/>
    <task id="Task11" status="PENDING" description="Implement the `Map` class in `Project_QT` using Qt data structures, preserving core data (tiles, layers, dimensions) from `wxwidgets`. Ensure `Tile` objects can hold `QVector<Item*>` and `QVector<Creature*>`. Focus on essential storage and methods (`getTile`, `addItem` stub, etc.) for later `QGraphicsView` interaction and performance."/>
    <task id="Task12" status="PENDING" description="Migrate the `Tile` class to `project_qt`, focusing on its data structure for holding `QVector<Item*>` (and `QVector<Creature*>`). Adapt tile flags and essential properties to Qt style (enum classes, type-safe methods). Implement basic getters/setters. Basic change signaling for `Map` updates."/>
    <task id="Task13" status="PENDING" description="Implement the `Item` class in `project_qt` with comprehensive property/attribute handling. Manage properties via `QMap<QString, QVariant>` for general attributes and direct members for critical flags. Implement `setAttribute`/`getAttribute`. Store type information. Basic placeholder `draw()` for text display. Replicate `getDescription()`."/>
    <task id="Task14" status="PENDING" description="Migrate `ItemManager` (basic functionality), focusing on loading item definitions from files (JSON or original DAT) into an internal `QMap<int, ItemPropertiesStruct>`. Implement parsing methods. Add `createItem(id)`/`getItemProperties(id)` stubs. Actual `Item` instantiation deferred."/>
    <task id="Task15" status="PENDING" description="Migrate the `Creature` class to `project_qt`, mirroring structure, core functionalities, and basic setters/getters (name, health, lookType) from `wxwidgets`. Use forward declarations for sprite access. Implement methods with placeholder effects if dependencies not yet migrated."/>
    <task id="Task16" status="PENDING" description="Implement `CreatureManager` to load creature properties from XML files (e.g., `creatures.xml`) using `QXmlStreamReader`. Retain `CreatureProperties` structure (possibly with new `Outfit` class). Store in `QMap` by `CreatureType::ID`. Implement `getCreatureProperties()`. Focus on data storage."/>
    <task id="Task17" status="PENDING" description="Create basic `Selection` class in `project_qt`. Implement internal structures for storing selected tile info (e.g., `QSet<QPoint3D>`). Define initial methods (add/remove/clear selection, `isSelected`). Port `SELECTION` flags enum if used for modes. Visualization deferred."/>
    <task id="Task18" status="PENDING" description="Implement initial UI for automagic border/wall settings (e.g., `walls_repel_borders`) as a `QDialog` or preference pane. Implement stubs for saving/loading these settings and initial signal/slot connections to placeholder functions in `MainWindow` or a stub `AutomagicBorderController`. Full `BorderSystem` integration is later."/>
    <task id="Task19" status="PENDING" description="Add `Spawn` data structure to `Project_QT` based on `wxwidgets spawn.cpp/h`. Create a simple `QDialog` to view/edit basic spawn details (type, radius - no live map interaction yet). Implement `Map::addSpawn()`/`removeSpawn()` stubs. Defer map integration and visualization."/>
    <task id="Task20" status="PENDING" description="Migrate the core `Waypoint` data structure from `wxwidgets waypoint.h` to `project_qt`, preserving essential data fields (name, position, type). Implement basic setters/getters. Focus on data representation only. UI, brush integration, and map interaction/saving are deferred."/>
    <task id="Task21" status="PENDING" description="Migrate `ClipboardData`, focusing on data storage, serialization (ideally to `QJsonDocument` for tiles/items), and retrieval for copy/paste. Implement `copyData()` to serialize selection, `getSerializedData()`, `setDataFromSerialized()`. Direct `QClipboard` interaction is later."/>
    <task id="Task22" status="PENDING" description="Migrate `Tile::Draw` logic. In `project_qt`'s `Tile::draw()`, implement rendering procedures for its `Item`s and `Creature`s by iterating them and calling their basic `draw()` methods. Respect conceptual layers and basic `DrawingOptions` visibility. No sprite loading or complex ground/wall rendering yet."/>
    <task id="Task23" status="PENDING" description="Complete `MapTileItem`'s essential drawing and logic. Its `paint()` must delegate to `Tile::draw()`. Implement optional visual caching to `QPixmap`. Ensure robust visual highlighting when its `Tile` is selected. Add basic collision checking stubs (e.g., `hasSolidItem()`) based on `Tile` contents and `DrawingOptions`."/>
    <task id="Task24" status="PENDING" description="Complete `Item` type system integration with `ItemManager`. `ItemManager::createItem(itemId)` now returns correctly typed `Item` objects (subclass or type-aware base) with all type-specific properties (teleport destination, container capacity etc.) correctly initialized from loaded definitions and original `Item::Create_OTBM` logic."/>
    <task id="Task25" status="PENDING" description="Implement the abstract base `Sprite` class in `project_qt` defining the core interface (pure virtual `drawTo()`, `unload()`, `width()`, `height()`) for all sprite types. Include common protected members if used in `wxwidgets` for polymorphism. Consider sprite size enums or dimension properties."/>
    <task id="Task26" status="PENDING" description="Create `EditorSprite` class (inheriting `Sprite`) for editor UI images (buttons, cursors) loaded from Qt resources or paths using `QPixmap`/`QImage`. Implement `drawTo()` using `QPainter`. Handle fixed resolutions or `RenderMode` if original `EditorGraphics` had such logic for UI elements."/>
    <task id="Task27" status="PENDING" description="Implement core `GameSprite` class (inheriting `Sprite`) for game assets. Include data members for sprite sheet info, animation frames (stubs), dimensions, `DrawHeight`/`drawOffset`, `SpriteLight` struct. Basic `drawTo()` for single frame. Stub `Animator` integration. Conceptual caching and `unload()`."/>
    <task id="Task28" status="PENDING" description="Implement initial, placeholder rendering for `Map`, `Tile`, and `Item` classes. If an entity lacks specific draw logic, it renders a basic placeholder (e.g., colored `QRectF`, text ID). Ensure these respect basic visibility. Goal is a visually debuggable scene."/>
    <task id="Task29" status="PENDING" description="Migrate core `MapCanvas` (or `MapView`) key event handling to `QKeyEvent`. Handle view movement (arrows), basic zoom (Ctrl +/- if direct view actions), and convert modifier checks. Delegate menu accelerators/selection ops to placeholder command handler stubs."/>
    <task id="Task30" status="PENDING" description="Replace `wxStatusBar` with `QStatusBar` in `MainWindow`. Consolidate fields (Mouse Pos, Current Brush, Selected Item Info, Zoom, Layer). Implement `MainWindow::updateStatusBarInfo()` or individual setters for manual updates. Dynamic updates later."/>
    <task id="Task31" status="PENDING" description="If `DCButton` was custom-drawn, create `SpriteButton` (subclassing `QPushButton`). Override `paintEvent()` to draw sprite/icon. Ensure `clicked()` signal works. Button manages its visual resource. Connect clicked to placeholder slots."/>
    <task id="Task32" status="PENDING" description="Fully migrate `ResourceManager` to Qt for loading/caching shared graphics (icons, UI textures, generic sprites not via `SpriteManager`) from paths or Qt resources. Store as `QPixmap`/`QImage` in `QMap`. Implement retrieval and optional categorization. Ensure thread-safety if required."/>
    <task id="Task33" status="PENDING" description="Create `BrushManager` (`QObject`) for brush creation (`createBrush(Brush::Type)` returning `Brush` subclasses) and management. Implement Qt signals for selection (`currentBrushChanged`) and creation. Add methods for external updates to current brush state (e.g., `updateFloodFillTargetItems`, `updateBrushSize`)."/>
    <task id="Task34" status="PENDING" description="Create/refactor brush interaction structure in `project_qt` for handling `MapCanvas` mouse events (click/drag/move) and right-click context menu actions. Translate events to target `Tile`(s)/area considering brush size/shape, active layer, and `canvas.cpp` state machines. Signal conceptual `Map`/`Selection` updates."/>
    <task id="Task35" status="PENDING" description="Implement core `.spr` and `.dat` loading in `SpriteManager`. Parse headers (`readTibiaSprHeader`, `readTibiaDatHeader`). Load sprite pixel data (handle RLE, 32x32 initially) into `QImage`/raw buffers. Link sprite IDs to basic `ItemData` (IDs, flags from DAT) for later `ItemManager` enrichment. Store SPR version."/>
    <task id="Task36" status="PENDING" description="Create `Brush` abstract base class in `project_qt` (from `brush.h`). Define pure virtual interface (`name()`, `type()`, `canDraw()`, `draw()`, `undraw()`). Each brush subclass implements these. Manage instances with smart pointers in `BrushManager`."/>
    <task id="Task37" status="PENDING" description="Implement `TerrainBrush` (inheriting `Brush`) as a base for terrain types. Transfer basic properties (name, type, `look_id`, z-order hints). `draw()`/`undraw()` are stubs/conceptual, as original terrain modification often happened via `MapCanvas` mouse events triggering other logic."/>
    <task id="Task38" status="PENDING" description="Migrate `GroundBrush` (inheriting `TerrainBrush`). `draw()` conceptually places a ground item on a `Tile`. Include placeholder hooks for `BorderSystem` interaction after drawing. Handle `ground_equivalent` logic based on `Item` properties or types."/>
    <task id="Task39" status="PENDING" description="Implement `WallBrush` (inheriting `TerrainBrush`/`Brush`). `draw()` conceptually places wall items. Include stubs for auto wall connection logic (neighbor checks) and door info handling (`door_type`, `doorItem` properties). Conceptual interaction with `TileFlags` or `ItemManager` for specific types."/>
    <task id="Task40" status="PENDING" description="Implement `WallDecorationBrush` (inheriting `WallBrush`/`Brush`). `draw()` method signals intent to place wall decoration items. Z-index/draw order deferred to `Tile::draw()` or `Item` properties. No complex `doorType` matching if `Tile::draw()` handles this. Conceptual cleanup logic for `undraw()`."/>
    <task id="Task41" status="PENDING" description="Implement the `AutoBorder` class in `project_qt` for representing properties of automatically generated border items (used by `GroundBrush`/`BorderSystem`). Store border type (from `EDGE_*` defines), `border_item_id`, associated `ground_item_id`/type. Methods for property access."/>
    <task id="Task42" status="PENDING" description="Migrate `TableBrush` (inheriting `Brush`). Replicate item mapping, handle random variations and border/connection logic (similar to `tables_items` in `Brushes/WallBrush`). `draw()` conceptually places table items. Port `tableize` or neighbor connection logic."/>
    <task id="Task43" status="PENDING" description="Migrate `CarpetBrush` (inheriting `Brush`). Carpet item data from `ItemManager` or configured for brush. `draw()` conceptually places carpet items. Port `getCarpet` methods or `Tile`/`Map` signals if `MapView`/`Tileset` UIs used them for state checks. Consider view state for placement logic."/>
    <task id="Task44" status="PENDING" description="Implement `OptionalBorderBrush` (inheriting `Brush`). Maintain `canDraw()`/`draw()`/`undraw()` for placing/removing optional border items (e.g., gravel). Interact conceptually with `Tile` border state or `BorderSystem`. Optional border item definition is key."/>
    <task id="Task45" status="PENDING" description="Create abstract base `ItemPropertyEditorBase` (`QWidget`) with virtual methods (`setEditingObject`, `loadPropertiesFromObject`, `savePropertiesToObject`). Derive stub Qt widget classes `ItemPropertyEditor` and `OldPropertiesWindow`. Focus on abstract structure, not UI details yet."/>
    <task id="Task46" status="PENDING" description="Implement missing controls on `MainToolBar` (from Task 9) and finalize interactions. Populate all `QAction`s. Connect signals to `MainWindow` placeholder slots for map/zoom/tool updates. Implement `QShortcut`s if any. Restore layout/state from settings (placeholder `g_settings`)."/>
    <task id="Task47" status="PENDING" description="Improve `BrushPalettePanel` and `BrushPanel`(s) for memory efficiency. Implement freeing of unused bitmaps/`QPixmap`s from `ItemButton`s. Port state resetting logic from original `wxwidgets` panels (clearing lists, selections, releasing resources on context switch). Refine `ItemButton` usage for displaying item icons/previews."/>
    <task id="Task48" status="PENDING" description="Complete `Item` attribute handling, focusing on reading complex data from OTBM Item types (as in `itemAttributes.cpp`) and item text. Implement robust `readDataString` or Qt equivalent for various attribute map formats and custom serialization (`ITEM_ATTR_*`). Store in `Item`'s `QMap<QString, QVariant>`."/>
    <task id="Task49" status="PENDING" description="Create basic `TilePropertyEditor` UI structure (`QWidget`/`QDialog`) mirroring `wxTilePropertiesWindow`. Lay out placeholder controls for viewing basic tile properties/flags (read-only for now). Implement a method to populate UI textually from a `Tile*` object. No data binding or editing yet."/>
    <task id="Task50" status="PENDING" description="Implement `ReplaceItemsDialog` UI (`QDialog`) for 'Find Similar Items'. Include controls for find criteria (ID, name, flags, type) and replacement rules (new ID, delete). Buttons 'Find', 'Replace All' connect to placeholder slots. No backend search/replace logic yet."/>
    <task id="Task51" status="PENDING" description="Implement actual map data serialization/deserialization in `Map` class (from Task 51 stubs). Full OTBM support (save/load using OTBM writer/reader classes for map header, all `Tile` data with `Item`s and attributes). Optionally XML/JSON if for full map. Requires robust `Item::serialize/deserializeToOTBM`. Handle chunking & client versions."/>
    <task id="Task52" status="PENDING" description="Integrate automatic border generation from `BorderSystem` with `QGraphicsView` rendering. Terrain `Tile` modifications (via brush/command) trigger `BorderSystem` to determine border `Item` changes. `MapView` visually updates only affected tiles using `Map` signals (`tilesChanged`). Focus on integration and visual update flow."/>
    <task id="Task53" status="PENDING" description="Implement remaining `Brush` specializations (`CarpetBrush`, `TableBrush`, `CreatureBrush`, `SpawnBrush`, etc.) as full classes. `draw()` methods place specific `Item` types onto `Tile`s. Port map-level recalculation logic (`doCarpets`, `recalculateTablesForRect`) if original brushes triggered these. Handle `Item` attribute interactions."/>
    <task id="Task54" status="PENDING" description="Fully integrate `GameSprite`s into `Item::draw()`. Replace placeholder `Item` rendering with actual sprite drawing via `SpriteManager` and `GameSprite::drawTo()`. Handle sprite layers, offsets, animations based on `ItemType` data. Implement zoom-based filtering/LOD in `drawTilesContentToCache` or `Item::draw()`."/>
    <task id="Task55" status="PENDING" description="Fully implement `Item` attribute map (`QMap<QString, QVariant>`). Migrate advanced properties (Door ID, Container content, Teleport dest) into this system. Ensure context menus/property editors update attributes correctly and trigger view updates. Finalize `Tile::creatureMap` or `Tile`'s creature/spawn list interaction with item attributes."/>
    <task id="Task56" status="PENDING" description="Implement `HouseBrush`, `HouseExitBrush`, `WaypointBrush`. `draw()` methods interact with `Map` to assign `HouseID`, mark exits, or create `Waypoint` objects/items. Handle interactions with dialogs (stubs or full) for configuring these. Ensure compatibility with `Item`-attribute based model for house/exit/waypoint semantics."/>
    <task id="Task57" status="PENDING" description="Migrate `FlagBrush`. `draw()` sets zone attributes on `Tile`s (`ZoneID`, PZ flag) either as direct `Tile` properties or by placing special 'zone items' with attributes. Create menu/tool button stubs for activating different `FlagBrush` modes."/>
    <task id="Task58" status="PENDING" description="Implement `QGraphicsItem` subclasses: `SelectionRubberBandItem` (for visual selection area), `WaypointItem` (marker/icon for waypoints), `SpawnItem` (marker/area for spawns). Refine how `Item`s/`Creature`s are rendered by `MapTileItem` (direct paint vs. child QGraphicsItems). Handle special map type indicators (zone overlays, house borders)."/>
    <task id="Task59" status="PENDING" description="Implement `TileFinder`/`ItemFinder` utility classes for flexible searching of `Tile`s/`Item`s in `Map` by criteria (ID, attributes, `ItemType`). Replace `Tile->findXXXBrush()` methods. Use for `Map::cleanDuplicateItems()`. Port `transformItem` logic. Handle layer filtering. Address original `Tile` property caching vs. finder efficiency."/>
    <task id="Task60" status="PENDING" description="Fully migrate `Map` OTBM loading/saving (from `map.cpp`, `IOTBM`). Robust serialization using `Map`'s structure (Tiles, Items, Houses, Spawns). Use OTBM stream/node library. Handle `Item` attribute serialization. Implement OTBM node types (`TAG_XYZ`). Critical: Handle client version differences affecting data interpretation/conversion during I/O."/>
    <task id="Task61" status="PENDING" description="Fully integrate tile selection in `MapView`. Robust mouse event handling (click/drag) with Shift/Ctrl for add/subtract/new selection modes. `Selection` object is updated. `SelectionItem` (visual) accurately synchronizes. Replicate original `wxwidgets` selection functionality precisely."/>
    <task id="Task62" status="PENDING" description="Replace main `wxFrame` with `QMainWindow`. Integrate `QMenuBar`, `QToolBar`(s), `QStatusBar`, `QDockWidget` panels (from `wxAuiManager`). Handle `closeEvent`. Basic `QTabWidget` (if for map views) tab switching calls placeholder `MapView` refresh/selection updates. Save/restore `QMainWindow` layout state (stubs for now)."/>
    <task id="Task63" status="PENDING" description="Fully migrate `Waypoint` system. Finalize `Waypoint` data class. `Map` manages `QList<Waypoint*>`. Implement `Tile` interaction (`Tile::setWaypoint` or query `Map`). Create initial UI panel (`QListWidget` for names) and `EditWaypointDialog` (stubs for property editing). `Map` signals waypoint changes for UI refresh."/>
    <task id="Task64" status="PENDING" description="Refactor loading of fundamental `Item` properties (sprite-linked, client IDs, core flags from `.dat` files) from old `wxwidgets Items` class into `SpriteManager` or a new combined `GameAssetLoader`. Ensure consistent management of sprite IDs, core `ItemType` data, and game version compatibility from `.dat`/`.spr`."/>
    <task id="Task65" status="PENDING" description="Migrate core drawing for basic shapes (rectangles, lines from SFML/`wxDC` for UI indicators) to `QPainter` in `MapCanvas` or specific `QGraphicsItems`. Implement dynamic brush preview rendering in `MapCanvas` under mouse (shape/size based on `Brush` properties, over drawable tiles)."/>
    <task id="Task66" status="PENDING" description="Migrate `House` and `Town` data structures and XML I/O (`QXmlStreamReader/Writer`). `Map` class stores `House`/`Town` lists. Implement basic linking between `Tile`s and `House`s (`Tile::setHouseID`). Placeholder hooks for `Tile`/map marker updates for UI."/>
    <task id="Task67" status="PENDING" description="Implement `TilesetManager` (or extend `ResourceManager`) for organizing `ItemType`s/`Brush`es into categories (e.g., 'Terrain', 'Doodads') similar to `wxwidgets g_materials` or `Brushes::TileSetCategory`. Load category definitions from config or derive from `ItemType` properties. For use by UI palettes."/>
    <task id="Task68" status="PENDING" description="Implement `FindItemDialog` `QDialog` UI with controls for searching items by ID, name, type, attributes. Include 'Browse Tile' concept (stub). Results area (stub). Buttons (Find, Go To) connect to placeholder `ItemManager`/`MapSearcher` methods."/>
    <task id="Task69" status="PENDING" description="Implement core `QUndoCommand`s for selection transformations: `MoveSelectionCommand`, `RotateSelectionCommand`, `FlipSelectionCommand`. `redo()` applies transformation to `Item`s/`Tile`s in current `Selection`; `undo()` reverts. Triggered by `MainWindow` actions. Port item transformation logic for orientation/ID changes. Conceptual `borderize` hook."/>
    <task id="Task70" status="PENDING" description="Create visual UI panels in `MainPalette` (e.g., `QTabWidget`) for `Tileset` categories from `TilesetManager` (e.g., 'Ground', 'Walls'). Populate panels with `ItemButton`s (displaying item/brush previews). Selecting an element signals `BrushManager` to set active brush/item."/>
    <task id="Task71" status="PENDING" description="Fully implement `Waypoints` system: `Map` manages waypoint data; `MapView`/`WaypointBrush` for map interaction (place/edit); dedicated `WaypointEditorPanel` UI for list/property editing; `WaypointItem` visuals on `MapView` & `Minimap`; persistence with map (OTBM/XML)."/>
    <task id="Task72" status="PENDING" description="Migrate any remaining `wxwidgets::map_drawer` rendering (SFML/OpenGL calls for selection boxes, custom brush/doodad drawing) to `QGraphicsView`/`QPainter`. Ensure `DrawingOptions` for inlined ground tile drawing, `Blit*` calls are ported. Finalize hover indicators."/>
    <task id="Task73" status="PENDING" description="Implement `House` data interactions with `Map`/`Tile`s. Port `Tile` update logic (e.g., for exits, `HouseID`) triggered by house edits. Migrate `cleanhouseItems` logic into editor actions (`CleanupHouseDataCommand`). Ensure `HousePropertiesPanel` changes propagate to `Map`/`Tile`s with undo/signals."/>
    <task id="Task74" status="PENDING" description="Finalize `Waypoint` drawing (`WaypointItem` on `MapScene`) and mouse click interactions in `MapView` (place/select/edit). Implement mouse-over tooltips for waypoint info. Ensure `Map::updateWaypoint` calls and signals for visual updates of `WaypointItem`s."/>
    <task id="Task75" status="PENDING" description="Implement `MapView` settings for drawing states (`ghost_items`, `show_zones`, `transparent_floors` via `DrawingOptions`). `MapTileItem::paint()` (and `Tile::draw`, `Item::draw`) must query these and adjust rendering. UI controls update `MapView` properties and trigger scene refresh."/>
    <task id="Task76" status="PENDING" description="Final pass on graphics/sprite/rendering. Ensure Z-ordering/layer support. Handle special `Item` flag rendering. Replace ALL remaining OpenGL (`TakeScreenshot`, `LightDrawer`) with Qt equivalents. Update `MapView::drawBrushIndicator()` to use `QPainter`. Ensure `Map::LoadVersion` uses current rendering states."/>
    <task id="Task77" status="PENDING" description="Ensure `StatusBar` and `MainToolBar` reflect active `Brush`/`Item` from palettes/`BrushManager`. Replicate `ActionIDChange` logic via signals from `PaletteItemBrush` or `BrushManager` to `MainWindow` for UI updates. Handle two-way sync if toolbar selection updates palette."/>
    <task id="Task78" status="PENDING" description="Migrate complex dialogs: `TilesetWindow` (if advanced tileset definition editor, not just display), `PreferencesWindow` (UI for all `SettingsManager` settings), `AboutWindow`, `HelpSystem`. Recreate UI, port logic, connect to backend (`TilesetManager`, `SettingsManager`). Ensure proper event/data flow."/>
    <task id="Task79" status="PENDING" description="Fully implement selection tool (`SelectionBrush`): all `wxwidgets selection.h` mouse actions, item transformation/deletion (execute full `QUndoCommand`s from Task 69). Full copy/cut/paste using `ClipboardData` and `QClipboard`, serializing/deserializing selection. Robust visual updates via signals."/>
    <task id="Task80" status="PENDING" description="Fully implement all `MapCanvas`/`MapView` display functions: smooth Zoom, dynamic Grid Line Drawing (toggleable, configurable, zoom-adaptive). Implement mouse tracking visuals (coords in status bar, brush-specific cursors) and tile/item hover highlighting. Port mouse capture logic (`onGain/loseMouse`) and item `doubleclick-properties` behavior."/>
    <task id="Task81" status="PENDING" description="Implement saving/loading for `Brush` data in `BrushManager` (XML/JSON). Persist custom/user-defined brush definitions, properties (ItemID, size, flags), and collections (doodad/house brushes). Load on startup or via Import. Edits from property panels should be persistable."/>
    <task id="Task82" status="PENDING" description="Fully implement `FindItemDialog` search functionality. Backend search in `ItemManager`/`MapSearcher` (by ID, name, `ItemType`, attributes). 'Find All' populates results list. Implement `ReplaceItemCommand` (undoable) for replacing/deleting found items based on criteria. Port text conversion logic if any (`findItemsInFile`)."/>
    <task id="Task83" status="PENDING" description="Implement advanced rendering: Level of Detail (LOD) for items/sprites based on `MapView` zoom (from `lod_manager.h` logic). Lighting effects ('Shade' visualization, item-emitted lights using `SpriteLight` data). Comprehensive transparency (sprite alpha, zoom-based, 'Show All Floors' effect). Configurable via `DrawingOptions`."/>
    <task id="Task84" status="PENDING" description="Migrate `Map` reading/writing from `wxwidgets BinaryFile` to `QFile`/`QDataStream` for ALL supported formats (OTBM versions, OTM, custom XML/binary). Implement format identification. Crucially, port inter-version conversion logic. Ensure full structure restoration (Tiles, Items, Waypoints, etc.) & `MapView` update."/>
    <task id="Task85" status="PENDING" description="Implement Tile Locking: `Tile` gets `isLocked` property. Add UI `QAction`s (menu/context menu) for Lock/Unlock Selection (undoable `LockTilesCommand`). `MapView` brush/selection tools must respect `tile->isLocked()`. `MapTileItem` visually indicates lock status."/>
    <task id="Task86" status="PENDING" description="Fully migrate `Town` and `House` systems. Implement full UI editors (`HouseEditorDialog`, `TownEditorDialog`) for all properties & tile assignments. All menu actions/tools functional. Robust sync between editors, `Map` data, `Tile` properties (`HouseID`), and `MapView`/`Minimap` visuals. All operations undoable."/>
    <task id="Task87" status="PENDING" description="Finalize `Creature` & `Spawn` systems: creatures render with correct `GameSprite`s/outfits/looktypes. `CreatureBrush`/`SpawnBrush` fully functional for placing/editing on map. UI palettes for creature type selection & spawn config dialog fully functional. `MapView` correctly displays spawn areas/creature sprites. Persistence of spawn data."/>
    <task id="Task88" status="PENDING" description="Implement `MyProgressDialog` (wrapping `QProgressDialog`). Refactor long operations (map I/O, complex search/replace, bulk transforms) to use this dialog, run core work in `QThread` (with cancellation) if UI blocking, and update dialog via signals. Replace all `wxProgressDialog` usages."/>
    <task id="Task89" status="PENDING" description="Fully implement 'Replace Item' functionality from `FindSimilarDialog`. Full UI options for criteria (names, flags, types) and replacement (new item ID/delete). Backend logic to find and replace items on map using undoable commands. All interactions use new `Item` property getters/attributes."/>
    <task id="Task90" status="PENDING" description="Implement full `Minimap` widget: renders scaled map view using tile colors (ground/items), handles click-to-navigate `MapView`, displays `MapView` viewport rectangle and updates it on pan/zoom. Syncs with `Map` content changes. Optional zoom buttons for minimap itself. Displays selection."/>
    <task id="Task91" status="PENDING" description="Migrate/recreate `TilesetWindows` if it was an advanced editor for defining/editing `Tileset` categories and their item/brush contents (beyond `MainPalette` display). UI to create/rename categories, assign items/brushes from managers. Interacts with `TilesetManager`. Handles specialized logic like `palettedoor` or `TileLocation` flag interactions if tied to tileset definitions."/>
    <task id="Task92" status="PENDING" description="Finalize `Spawn` visualization on `MapView`/`MapScene` (via `SpawnItem` or `MapTileItem` overlays). Ensure visuals (marker, radius, creature type indicators) correctly reflect all `Spawn` attributes from `spawns.cpp` logic. Drawing flags related to spawns correctly interpreted by rendering system. `Brush` application correctly updates spawn data that visuals depend on."/>
    <task id="Task93" status="PENDING" description="Implement fully functional `TilePropertyEditor` dialog/panel. UI displays and allows editing of ALL applicable `Tile` properties (flags, `HouseID`, `ZoneID`, `minimap_color`, map flags). Robust data binding to `Tile` object. Changes are undoable commands, update `Map`, trigger `MapView`/`Minimap` refresh."/>
    <task id="Task94" status="PENDING" description="Culminating task for full `Houses` and `Towns` system integration. Ensure all data management (`House`/`Town` objects in `Map`), UI interactions (editors, map clicks), property displays, and synchronization with `Map`, `MapView`, `Minimap` are robust and feature-complete. Full persistence (OTBM attributes or XML). Full undo/redo for all operations."/>
    <task id="Task95" status="PENDING" description="Complete `SelectionBrush`/tool: full `wxwidgets map_display` mouse action replication (drag, modifiers for complex selections). Full execution of transformation commands (Move, Rotate, Flip) on selected `Tile`s/`Item`s in `Map`. Original visual feedback (ghosting, pivots) ported to `QPainter`/`QGraphicsItems`. Undoable map changes."/>
    <task id="Task96" status="PENDING" description="Implement full keyboard focus management, navigation (Tab, arrows), and input handling for ALL UI elements (palettes, dialogs, controls). Prevent `MapView` intercepting input for focused fields. Port `wxNumberTextCtrl` validation. Property editor changes commit robustly with undo/refresh."/>
    <task id="Task97" status="PENDING" description="Fully implement `SettingsManager` (`QSettings`). ALL configurable `wxwidgets g_settings` (UI layouts, paths, rendering options, brush defaults, automagic states, etc.) saved on exit, loaded/applied on startup. `PreferencesWindow` UI to modify all settings, with changes applied live and persisted."/>
    <task id="Task98" status="PENDING" description="Fully migrate 'Ground Border Tool' if distinct from general automagic bordering. Port its specific UI (if any) and unique algorithm for placing/adjusting ground borders. Integrate with `BorderSystem`, `GroundBrush`, and `Map` data model. Ensure undoable actions and `MapView` updates."/>
    <task id="Task99" status="PENDING" description="If `LiveSocket` was for network messaging (multi-user, server sync), migrate core features to Qt (`QTcpSocket`/`QUdpSocket`). Port message data structures/packets, serialization. Basic send/receive stubs for `NetworkController`. Log network activity. Placeholder handlers for `updateProgress`/`StartPasting` messages."/>
    <task id="Task100" status="PENDING" description="Comprehensive review, refactor, optimization, and testing of entire `project_qt`. Refactor for consistency, Qt best practices. Optimize resource handling, rendering, algorithms. Thorough functional testing (all features, test maps). Fix all bugs, warnings. Finalize documentation, error handling. Ensure QObject system/thread safety for globals/memory as per original."/>
  </task_list>

  <execution_control>
    <!--
      The following fields are NOT actively used by Jules to manage its state in the current workflow.
      Jules determines the next task based on chat approvals and the first "PENDING" task it hasn't formally completed.
      These are kept for human reference or if a different workflow were used in the future.
    -->
    <!-- <current_task_id>Task1</current_task_id> -->
    <total_tasks>100</total_tasks> <!-- This can be useful for overall context. -->
    <!-- <processed_for_review_count>0</processed_for_review_count> -->
    <!-- <approved_and_merged_count>0</approved_and_merged_count> -->
  </execution_control>

  <!--
    The <workflow_instructions> block describes a general interaction pattern.
    The specific detailed workflow Jules follows is now in 'master_prompt.txt'.
    This block is kept for human reference to understand the original, more manual intent.
  -->
  <workflow_instructions>
    <step name="TaskSelection">AI identifies the current task based on a marker in this XML (or the next PENDING one if managing internally).</step>
    <step name="CodeGeneration">AI generates Qt6 code, placing it in `./Project_QT/src`.</step>
    <step name="GitCommandGenerationOrExecution">AI either generates Git commands for the user or executes them if capable.</step>
    <step name="PauseForReview">AI pauses and waits for user review and approval/rework feedback.</step>
    <step name="UserReviewAction">User reviews. Prompts AI with "APPROVED:[TaskID]" or "REWORK:[TaskID] [Feedback]". User may update XML for their tracking.</step>
    <step name="ContinuationOrRework">If approved, AI prepares for next task. If rework, AI addresses feedback.</step>
    <step name="LoopUntilAllCompleted">Process repeats until all tasks are approved.</step>
  </workflow_instructions>

  <final_instructions>
    <!-- These are now integrated and superseded by the more detailed instructions in master_prompt.txt for Jules -->
    <!-- <instruction>After generating code for a task AND the Git commands, state: "CODE AND GIT COMMANDS FOR [Task ID] GENERATED. REPO: https://github.com/sword-of-fury/project_qt. PLEASE EXECUTE GIT COMMANDS, PUSH THE BRANCH, CREATE A PULL REQUEST (IF APPLICABLE), AND REVIEW. WAITING FOR APPROVAL (APPROVED:[TaskID]) OR REWORK INSTRUCTIONS (REWORK:[TaskID] [feedback])."</instruction> -->
    <!-- <instruction>When I provide "APPROVED:[TaskID]", you will prepare to work on the next PENDING task from this XML (which I will have updated).</instruction> -->
    <!-- <instruction>When all tasks in `<task_list>` are conceptually 'COMPLETED' (approved by me), state: "---ALL TASKS FROM migration_tasks_config.xml COMPLETED AND APPROVED. MIGRATION FINISHED FOR REPO https://github.com/sword-of-fury/project_qt.---"</instruction> -->
  </final_instructions>

</project_migration_tasks>