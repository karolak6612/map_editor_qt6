--- START OF FILE migration_tasks_config.xml ---

<project_migration_tasks>

  <header>
    <title>Project Migration to Qt6 Framework - Task-Based Execution with Review</title>
    <auditor>User (Hiring Manager & Reviewer)</auditor>
    <coder>AI Coding Assistant</coder>
    <date_issued>YYYY-MM-DD</date_issued> <!-- Placeholder for actual date -->
    <version>X.Y.Z</version> <!-- Placeholder for semantic version -->
  </header>

  <introduction_and_setup>
    <greeting>
      Hello AI Coding Assistant! We're migrating to Qt6. You'll work on a local copy of the repo, directly modifying files. I'll provide feedback via chat for each main task. This project involves careful code analysis, migration, and potentially refactoring large files for better modularity and to ensure you can operate effectively within your processing limits.
      You will be asked to choose between 'MANUAL' or 'AUTONOMOUS' approval modes at startup.
      I am the Auditor & Reviewer. Your role is the Coder.
    </greeting>
    <project_paths>
      <old_source_code_location>wxwidgets</old_source_code_location> <!-- Path relative to repo root -->
      <new_qt6_project_code_location>Project_QT/src</new_qt6_project_code_location> <!-- Path relative to repo root -->
    </project_paths>
    <git_repository_details>
        <repository_url>https://github.com/karolak6612/map_editor_qt6</repository_url>
        <main_branch>main</main_branch>
        <remote_name>origin</remote_name>
        <!-- NOTE: The AI Coding Assistant will not directly interact with Git. This information is for general project context. -->
    </git_repository_details>
    <core_coding_mandates>
      <mandate id="M1">Provide all functional Qt6 code for the current task, ensuring 100% feature parity with the original `wxwidgets` functionality for that task's scope.</mandate>
      <mandate id="M2">Produce complete and functional code for the current task. No incomplete snippets or placeholders unless explicitly part of a phased task (e.g., initial stubs). This means if a piece of functionality is within the defined scope of the current task, it **MUST** be fully implemented. Leaving `// TODO: Implement this later` comments for functionality that *is* part of the current task's requirements is not acceptable.</mandate>
      <mandate id="M3">All new/modified Qt6 C++ code must reside within the `new_qt6_project_code_location` (i.e., `Project_QT/src`).</mandate>
      <mandate id="M4">Target Qt6 and adhere to modern C++ and Qt6 best practices, ensuring code is clean, maintainable, and well-documented where necessary.</mandate>
      <mandate id="M5">Thoroughly reference `old_source_code_location` (i.e., `wxwidgets`) for original logic. Critically analyze any existing code in `Project_QT/src` relevant to the current task; refactor, complete, or replace it as needed to meet requirements.</mandate>
      <mandate id="M6" type="FILE_SIZE_MANAGEMENT">
          <description>File Size and Modularity (CRUCIAL)</description>
          <condition>If any C++ source/header file in `Project_QT/src` (new or modified) is anticipated to exceed approximately 750 lines, OR if an existing file is already this large and changes are substantial (e.g., >150-200 lines added/modified).</condition>
          <action_required>You MUST first refactor the relevant code into smaller, logically coherent modules BEFORE implementing the main task logic for that code section. Each new module MUST consist of a new .cpp and .h file (e.g., encapsulating a class or related free functions). Preserve all existing functionality. Report all new files created using the `NEW_FILES_REPORTED:` tag in your summaries and activity feed.</action_required>
          <escape_clause>
            <condition_deferral>If refactoring is 1) Exceptionally complex (intricate, non-obvious dependencies), 2) High risk of functional regressions, OR 3) Would unmanageably expand current task scope.</condition_deferral>
            <action_deferral>You MAY defer refactoring. If deferring, you MUST state: `DEFERRED_REFACTORING_WARNING: Task [TaskID] - File [large_file.cpp] (approx. XXXX lines). Reason: [HIGH_COMPLEXITY_DEPS | HIGH_REGRESSION_RISK | SCOPE_EXPANSION]. Proceeding with modifications on existing large file. This file is a high priority candidate for future dedicated refactoring.`</action_deferral>
          </escape_clause>
          <reference>Detailed operational workflow for this mandate is in `tasks/master_prompt.txt` (Core Directive 5).</reference>
        </mandate>
      <mandate id="M7" type="STATUS_TRACKING">
          <description>Task Status Management in XML</description>
          <action_required>You MUST update the 'status' attribute of the current task directly within 'tasks/migration_tasks_config.xml' to reflect its state (PENDING, COMPLETE_FOR_REVIEW, REWORK_REQUESTED, PENDING). This provides persistent task tracking, and is also used for autonomous progression.</action_required>
      </mandate>
    </core_coding_mandates>
  </introduction_and_setup>

  <task_list>
    <task id="Task1"><status>APPROVED</status><title>Migrate `wxImage` to `QImage`.</title><detailed_spec_file>tasks_definitions/Task1.md</detailed_spec_file></task>
    <task id="Task2"><status>APPROVED</status><title>Migrate `wxBitmap` to `QPixmap`.</title><detailed_spec_file>tasks_definitions/Task2.md</detailed_spec_file></task>
    <task id="Task3"><status>APPROVED</status><title>Migrate `wxDC` (Device Context) to `QPainter`.</title><detailed_spec_file>tasks_definitions/Task3.md</detailed_spec_file></task>
    <task id="Task4"><status>APPROVED</status><title>Basic `wxPanel` to `QWidget` Transition (Containers).</title><detailed_spec_file>tasks_definitions/Task4.md</detailed_spec_file></task>
    <task id="Task5"><status>APPROVED</status><title>Refactor mouse events for position and wheel in `MapView`.</title><detailed_spec_file>tasks_definitions/Task5.md</detailed_spec_file></task>
    <task id="Task6"><status>APPROVED</status><title>`Brush` class transition (core structure and mouse event stubs).</title><detailed_spec_file>tasks_definitions/Task6.md</detailed_spec_file></task>
    <task id="Task7"><status>APPROVED</status><title>Refactor basic `wxDialog` classes to `QDialog` (UI layout and simple signals/slots).</title><detailed_spec_file>tasks_definitions/Task7.md</detailed_spec_file></task>
    <task id="Task8"><status>APPROVED</status><title>Full `wxMenuBar` to `QMenuBar` Implementation.</title><detailed_spec_file>tasks_definitions/Task8.md</detailed_spec_file></task>
    <task id="Task9"><status>APPROVED</status><title>`QToolBar` Conversion for `MainToolBar` (Actions, Basic Controls).</title><detailed_spec_file>tasks_definitions/Task9.md</detailed_spec_file></task>
    <task id="Task10"><status>APPROVED</status><title>Migrate `wxAuiManager` docking for core panels to `QDockWidget`.</title><detailed_spec_file>tasks_definitions/Task10.md</detailed_spec_file></task>
    <task id="Task11"><status>APPROVED</status><title>Implement `Map` Data Structure in Qt (Core Logic, Tile/Item/Creature Storage, Iterators).</title><detailed_spec_file>tasks_definitions/Task11.md</detailed_spec_file></task>
    <task id="Task12"><status>APPROVED</status><title>Port `Tile` class to Qt (Item/Creature Storage, Flags, Properties, Basic Signals).</title><detailed_spec_file>tasks_definitions/Task12.md</detailed_spec_file></task>
    <task id="Task13"><status>APPROVED</status><title>Migrate `Item` class properties & structure (Full Attribute Model, Type Handling, Basic Rendering).</title><detailed_spec_file>tasks_definitions/Task13.md</detailed_spec_file></task>
    <task id="Task14"><status>APPROVED</status><title>Create `ItemManager` in Qt (Core Structure & Definition Loading from Files).</title><detailed_spec_file>tasks_definitions/Task14.md</detailed_spec_file></task>
    <task id="Task15"><status>APPROVED</status><title>Create Basic `Creature` Class in Qt (Data & Accessors, Sprite Forward Declaration).</title><detailed_spec_file>tasks_definitions/Task15.md</detailed_spec_file></task>
    <task id="Task16"><status>APPROVED</status><title>Migrate `CreatureManager` basic file handling (XML Parsing & Property Storage).</title><detailed_spec_file>tasks_definitions/Task16.md</detailed_spec_file></task>
    <task id="Task17"><status>APPROVED</status><title>Migrate `Selection` Class - Initial functions and structures (Tile Storage, Modes, Flags).</title><detailed_spec_file>tasks_definitions/Task17.md</detailed_spec_file></task>
    <task id="Task18"><status>APPROVED</status><title>Migrate `Automagic_Settings` - Set Up Initial UI and Placeholder Links to `BorderSystem`.</title><detailed_spec_file>tasks_definitions/Task18.md</detailed_spec_file></task>
    <task id="Task19"><status>APPROVED</status><title>Port `wxwidgets` Spawn code to `Project_QT` (Core Data, Basic Dialog, `Map` Stubs).</title><detailed_spec_file>tasks_definitions/Task19.md</detailed_spec_file></task>
    <task id="Task20"><status>APPROVED</status><title>Initial `Waypoint` Class Migration and Storage (Data Structure & Core Attributes ONLY).</title><detailed_spec_file>tasks_definitions/Task20.md</detailed_spec_file></task>
    <task id="Task21"><status>APPROVED</status><title>Implement Core `ClipboardData` Functionality (Data Serialization/Deserialization for Copy/Paste).</title><detailed_spec_file>tasks_definitions/Task21.md</detailed_spec_file></task>
    <task id="Task22"><status>APPROVED</status><title>Migrate `Tile` drawing function (Comprehensive Item/Creature Rendering Loop & Initial Visibility).</title><detailed_spec_file>tasks_definitions/Task22.md</detailed_spec_file></task>
    <task id="Task23"><status>APPROVED</status><title>Finish `MapTileItem` drawing and logic (Full `Tile` Delegation, Caching, Selection Highlight, Collision).</title><detailed_spec_file>tasks_definitions/Task23.md</detailed_spec_file></task>
    <task id="Task24"><status>APPROVED</status><title>Integrate `Item`'s Type System with `ItemManager` (Full Typed `Item` Creation & Properties).</title><detailed_spec_file>tasks_definitions/Task24.md</detailed_spec_file></task>
    <task id="Task25"><status>APPROVED</status><title>Create Basic `Sprite` Abstract Class in Qt (Core Interface & Polymorphism Support).</title><detailed_spec_file>tasks_definitions/Task25.md</detailed_spec_file></task>
    <task id="Task26"><status>APPROVED</status><title>Create `EditorSprite` and its initial renderer (Full UI Sprite Implementation).</title><detailed_spec_file>tasks_definitions/Task26.md</detailed_spec_file></task>
    <task id="Task27"><status>APPROVED</status><title>Create Initial `GameSprite` class (Data, Animation Stubs, Basic Rendering, Core Attributes).</title><detailed_spec_file>tasks_definitions/Task27.md</detailed_spec_file></task>
    <task id="Task28"><status>APPROVED</status><title>Add Initial Placeholder Renderers (Comprehensive Map, Tile, Item Visual Stubs).</title><detailed_spec_file>tasks_definitions/Task28.md</detailed_spec_file></task>
    <task id="Task29"><status>APPROVED</status><title>Begin Transition of Key Event Handling in `MapCanvas` and Menus (Core Navigation, Zoom, Basic Command Invocation).</title><detailed_spec_file>tasks_definitions/Task29.md</detailed_spec_file></task>
    <task id="Task30"><status>APPROVED</status><title>Replace `wxStatusBar` to Qt and simplify (Core Fields, `MainWindow` Update Methods).</title><detailed_spec_file>tasks_definitions/Task30.md</detailed_spec_file></task>
    <task id="Task31"><status>APPROVED</status><title>Migrate `dc_button.h` to `QPushButton` subclass (e.g., `SpriteButton`) and implement basic `onClick` and self-drawing.</title><detailed_spec_file>tasks_definitions/Task31.md</detailed_spec_file></task>
    <task id="Task32"><status>APPROVED</status><title>Implement `ResourceManager` in Qt (Complete - Sprite/Icon/Texture Loading, Caching, Categorization).</title><detailed_spec_file>tasks_definitions/Task32.md</detailed_spec_file></task>
    <task id="Task33"><status>APPROVED</status><title>Create `BrushManager` in Qt (Full `QObject` System, Creation, Selection Signals, State Update Methods).</title><detailed_spec_file>tasks_definitions/Task33.md</detailed_spec_file></task>
    <task id="Task34"><status>APPROVED</status><title>Brush interaction structure and helpers (Full Mouse Event to Tile/Action Logic, Including `MapCanvas` State Machines).</title><detailed_spec_file>tasks_definitions/Task34.md</detailed_spec_file></task>
    <task id="Task35"><status>APPROVED</status><title>Implement `SpriteManager` (Loaders - SPR/DAT Parsing, ImageSpace, Header Logic, Basic ItemData Linking).</title><detailed_spec_file>tasks_definitions/Task35.md</detailed_spec_file></task>
    <task id="Task36"><status>APPROVED</status><title>Migrate core `Brushes` interface from `brush.h` (`Brush` Abstract Base Class & Smart Pointers).</title><detailed_spec_file>tasks_definitions/Task36.md</detailed_spec_file></task>
    <task id="Task37"><status>APPROVED</status><title>Implement `TerrainBrush` (Base for Terrain Types - Drawing Stubs & Core Properties).</title><detailed_spec_file>tasks_definitions/Task37.md</detailed_spec_file></task>
    <task id="Task38"><status>APPROVED</status><title>Migrate `GroundBrush` (Terrain Subtype - Item Placement & Border System Hook Placeholders).</title><detailed_spec_file>tasks_definitions/Task38.md</detailed_spec_file></task>
    <task id="Task39"><status>APPROVED</status><title>Implement `WallBrush` (Terrain Subtype - Wall Placement, Connection Stubs, Door Logic).</title><detailed_spec_file>tasks_definitions/Task39.md</detailed_spec_file></task>
    <task id="Task40"><status>APPROVED</status><title>Implement `WallDecorationBrush` (Structure, Drawing Intent, Z-Order Considerations).</title><detailed_spec_file>tasks_definitions/Task40.md</detailed_spec_file></task>
    <task id="Task41"><status>APPROVED</status><title>Implement `AutoBorder` class structure in Qt (Data Representation for Borders).</title><detailed_spec_file>tasks_definitions/Task41.md</detailed_spec_file></task>
    <task id="Task42"><status>APPROVED</status><title>Migrate `TableBrush` structure, item mapping, variations, and interaction logic.</title><detailed_spec_file>tasks_definitions/Task42.md</detailed_spec_file></task>
    <task id="Task43"><status>APPROVED</status><title>Migrate `CarpetBrush` structure, item placement, and `getCarpet` logic.</title><detailed_spec_file>tasks_definitions/Task43.md</detailed_spec_file></task>
    <task id="Task44"><status>APPROVED</status><title>Implement `OptionalBorderBrush` structure and conditional draw/undraw logic.</title><detailed_spec_file>tasks_definitions/Task44.md</detailed_spec_file></task>
    <task id="Task45"><status>APPROVED</status><title>Create `ItemPropertyEditorBase` and Subclasses (Abstract Editor UI Structure).</title><detailed_spec_file>tasks_definitions/Task45.md</detailed_spec_file></task>
    <task id="Task46"><status>APPROVED</status><title>Refactor `MainToolBar` UI Using `QToolBar` (Populate Actions, Enhance Controls, Interactions).</title><detailed_spec_file>tasks_definitions/Task46.md</detailed_spec_file></task>
    <task id="Task47"><status>APPROVED</status><title>`BrushPalettePanel` and `BrushPanel` Cleanup and Efficiency (Resource Management & `ItemButton` Usage).</title><detailed_spec_file>tasks_definitions/Task47.md</detailed_spec_file></task>
    <task id="Task48"><status>APPROVED</status><title>Finish remaining `ItemAttributes`/`Items` (Full OTBM Complex Data Read & Custom Serialization).</title><detailed_spec_file>tasks_definitions/Task48.md</detailed_spec_file></task>
    <task id="Task49"><status>APPROVED</status><title>Basic `TilePropertyEditor` Migration (UI Structure, Placeholder Property Display).</title><detailed_spec_file>tasks_definitions/Task49.md</detailed_spec_file></task>
    <task id="Task50"><status>APPROVED</status><title>Implement `ReplaceItemsDialog` UI (Find Similar - Full UI, Placeholder Backend).</title><detailed_spec_file>tasks_definitions/Task50.md</detailed_spec_file></task>
    <task id="Task51"><status>APPROVED</status><title>Data Serialization for `Map` (OTBM/XML/JSON - Method Implementation & Full `Item` Ser/Des).</title><detailed_spec_file>tasks_definitions/Task51.md</detailed_spec_file></task>
    <task id="Task52"><status>APPROVED</status><title>Integrate Automagic Borders with Qt's Rendering System (Visual Updates post-Terrain Edit).</title><detailed_spec_file>tasks_definitions/Task52.md</detailed_spec_file></task>
    <task id="Task53"><status>APPROVED</status><title>Migrate remaining Brush types to Qt (`CarpetBrush`, `TableBrush`, `CreatureBrush`, `SpawnBrush`, etc. - Full Implementation with Item/Map Interaction).</title><detailed_spec_file>tasks_definitions/Task53.md</detailed_spec_file></task>
    <task id="Task54"><status>APPROVED</status><title>Finalize Item Rendering (Integrate Sprites - Full Sprite Sheet & Animation Handling).</title><detailed_spec_file>tasks_definitions/Task54.md</detailed_spec_file></task>
    <task id="Task55"><status>APPROVED</status><title>Add Support for `Item` Attributes Map (Advanced Properties, Door/Container Logic, `creatureMap` on `Tile`).</title><detailed_spec_file>tasks_definitions/Task55.md</detailed_spec_file></task>
    <task id="Task56"><status>APPROVED</status><title>Implement Remaining Specialized Brushes (`HouseBrush`, `HouseExitBrush`, `WaypointBrush` - Full Logic & Map Interaction).</title><detailed_spec_file>tasks_definitions/Task56.md</detailed_spec_file></task>
    <task id="Task57"><status>APPROVED</status><title>Migrate `FlagBrush` (Zones - Tile Attribute Setting & Menu/Tool Integration).</title><detailed_spec_file>tasks_definitions/Task57.md</detailed_spec_file></task>
    <task id="Task58"><status>APPROVED</status><title>Implement Custom `QGraphicsItems` (Selection, Waypoint, Spawn, Item/Creature Visuals on `MapTileItem`).</title><detailed_spec_file>tasks_definitions/Task58.md</detailed_spec_file></task>
    <task id="Task59"><status>APPROVED</status><title>Create `ItemFinder` / `TileFinder` utilities (Comprehensive Item/Tile Searching Logic).</title><detailed_spec_file>tasks_definitions/Task59.md</detailed_spec_file></task>
    <task id="Task60"><status>APPROVED</status><title>Implement File Handling and Version Conversion for `Map` (OTBM - Full `NodeFile` IO & TileSet/ItemAttribute Serialization).</title><detailed_spec_file>tasks_definitions/Task60.md</detailed_spec_file></task>
    <task id="Task61"><status>APPROVED</status><title>Integrate Tile Selection in `MapView` (Full Modifier Key Logic & Visual Synchronization).</title><detailed_spec_file>tasks_definitions/Task61.md</detailed_spec_file></task>
    <task id="Task62"><status>APPROVED</status><title>Full Migration of `wxFrame` (main window), menus, and `wxAUI` (if used for main layout) to Qt `QMainWindow` and related panels (Complete UI Shell & Basic Wiring).</title><detailed_spec_file>tasks_definitions/Task62.md</detailed_spec_file></task>
    <task id="Task63"><status>APPROVED</status><title>Migrate Waypoints to Qt (`waypoints.h/.cpp` including its interaction in Maps, creating appropriate UI elements for list/edit operations (Full Data Model, UI Stubs, Map Linking).</title><detailed_spec_file>tasks_definitions/Task63.md</detailed_spec_file></task>
    <task id="Task64"><status>APPROVED</status><title>Move all Item Properties Loading from `Items` class into `SpriteManager` (or Combined Asset Manager - Unifying `.dat`/Sprite/ItemType Logic).</title><detailed_spec_file>tasks_definitions/Task64.md</detailed_spec_file></task>
    <task id="Task65"><status>APPROVED</status><title>Migrate Basic Drawing Primitives (`QPainter` from SFML/wx) and Implement Brush Preview in `MapCanvas`.</title><detailed_spec_file>tasks_definitions/Task65.md</detailed_spec_file></task>
    <task id="Task66"><status>APPROVED</status><title>Migrate `House` and `Town` Handling (Data Structures, XML I/O, Basic `Map` Integration & Drawing Hooks).</title><detailed_spec_file>tasks_definitions/Task66.md</detailed_spec_file></task>
    <task id="Task67"><status>APPROVED</status><title>Add `Tileset` Management to `ResourceManager` or new `TilesetManager` (Linking Items/Brushes by Category).</title><detailed_spec_file>tasks_definitions/Task67.md</detailed_spec_file></task>
    <task id="Task68"><status>APPROVED</status><title>Create `Find Item Dialog` (Qt Version - Full UI, Search Logic Stubs, `Browse Tile` Concept).</title><detailed_spec_file>tasks_definitions/Task68.md</detailed_spec_file></task>
    <task id="Task69"><status>APPROVED</status><title>Integrate `Selection` Transformation Commands (Move, Rotate, Flip - Full Undoable Command Structure).</title><detailed_spec_file>tasks_definitions/Task69.md</detailed_spec_file></task>
    <task id="Task70"><status>APPROVED</status><title>Finish `Tileset` implementations (Creating Visual Panels for Tile, Ground, Doodad etc. in `MainPalette`).</title><detailed_spec_file>tasks_definitions/Task70.md</detailed_spec_file></task>
    <task id="Task71"><status>APPROVED</status><title>Implement `Waypoints` system (Full Functionality: Data, Map Interaction, UI Panel, Minimap Markers, Persistence).</title><detailed_spec_file>tasks_definitions/Task71.md</detailed_spec_file></task>
    <task id="Task72"><status>APPROVED</status><title>Migrate remaining rendering code in `map_drawer` to `QGraphicsView` (SFML/OpenGL Replacement, Selection Boxes, Brush/Doodad Custom Drawing).</title><detailed_spec_file>tasks_definitions/Task72.md</detailed_spec_file></task>
    <task id="Task73"><status>APPROVED</status><title>Port `House` and related operations using new system (Full Map Data Interaction, Tile Updates, Cleanup Actions).</title><detailed_spec_file>tasks_definitions/Task73.md</detailed_spec_file></task>
    <task id="Task74"><status>APPROVED</status><title>Port `Waypoint` drawing code, and functionality for clicking (Full `MapView` Interaction, Tooltips, `Map` Updates).</title><detailed_spec_file>tasks_definitions/Task74.md</detailed_spec_file></task>
    <task id="Task75"><status>APPROVED</status><title>Update `MapView` properties for drawing states (Implement `OnChangeViewSettings` for `ghost_items`, `show_zones`, etc.).</title><detailed_spec_file>tasks_definitions/Task75.md</detailed_spec_file></task>
    <task id="Task76"><status>APPROVED</status><title>Finish Graphics/Sprite/Rendering Integration (Layer Support, Special Item Flags, OpenGL Replacements, `drawBrushIndicator`).</title><detailed_spec_file>tasks_definitions/Task76.md</detailed_spec_file></task>
    <task id="Task77"><status>APPROVED</status><title>Update Status/Toolbar for Action IDs for items when drawing/brush changes (Full Palette/Brush Sync).</title><detailed_spec_file>tasks_definitions/Task77.md</detailed_spec_file></task>
    <task id="Task78"><status>APPROVED</status><title>Migrate Remaining Dialogs and Windows (Advanced Features - e.g., `TilesetWindow`, `PreferencesWindow`, `HelpSystem`).</title><detailed_spec_file>tasks_definitions/Task78.md</detailed_spec_file></task>
    <task id="Task79"><status>APPROVED</status><title>Implement remaining selection tool features (Full Mouse Actions, Transformation Logic, Signals, Copy/Cut/Paste Commands).</title><detailed_spec_file>tasks_definitions/Task79.md</detailed_spec_file></task>
    <task id="Task80"><status>APPROVED</status><title>Port `Map Display` functions (Zoom, Grid, Mouse Hover/Capture Effects, Full `MapCanvas` Logic).</title><detailed_spec_file>tasks_definitions/Task80.md</detailed_spec_file></task>
    <task id="Task81"><status>COMPLETE</status><title>Complete Brush Loading/Saving (EXACT 1:1 wxwidgets XML format + JSON persistence for Custom/User-Defined Brushes & States).</title><detailed_spec_file>tasks_definitions/Task81.md</detailed_spec_file></task>
    <task id="Task82"><status>COMPLETE_FOR_REVIEW</status><title>Migrate and Enhance Search Functionality (Full `FindItemDialog`, 'Find All', Replace Logic & `ItemTypes` Integration).</title><detailed_spec_file>tasks_definitions/Task82.md</detailed_spec_file></task>
    <task id="Task83"><status>COMPLETE_FOR_REVIEW</status><title>Enhance Rendering: LOD, Lighting Effects, Transparency (Full Visual Feature Parity).</title><detailed_spec_file>tasks_definitions/Task83.md</detailed_spec_file></task>
    <task id="Task84"><status>COMPLETE_FOR_REVIEW</status><title>Implement Map Loaders and Converters (Full BinaryFile I/O Replacement, All Formats, Version Conversions).</title><detailed_spec_file>tasks_definitions/Task84.md</detailed_spec_file></task>
    <task id="Task85"><status>COMPLETE_FOR_REVIEW</status><title>Implement Tile Locking Mechanism (Data Model, UI Actions, `MapView` Interaction).</title><detailed_spec_file>tasks_definitions/Task85.md</detailed_spec_file></task>
    <task id="Task86"><status>COMPLETE_FOR_REVIEW</status><title>Migrate and Refactor the `Town` and `House` System (Enhanced - Full UI Editors, All Menu Actions, Tile Property Logic).</title><detailed_spec_file>tasks_definitions/Task86.md</detailed_spec_file></task>
    <task id="Task87"><status>COMPLETE_FOR_REVIEW</status><title>Complete `Creature` and `Spawn` Integration (Full Sprites, Attributes, Brushes, UI, Map Drawing).</title><detailed_spec_file>tasks_definitions/Task87.md</detailed_spec_file></task>
    <task id="Task88"><status>COMPLETE_FOR_REVIEW</status><title>Create `ProgressDialog` using `QProgressDialog` and adapt usages (Threaded Long Operations).</title><detailed_spec_file>tasks_definitions/Task88.md</detailed_spec_file></task>
    <task id="Task89"><status>COMPLETE_FOR_REVIEW</status><title>Migrate Replace Item Functionality (Full `Find Similar` Dialog Logic, Options, & Map Updates).</title><detailed_spec_file>tasks_definitions/Task89.md</detailed_spec_file></task>
    <task id="Task90"><status>COMPLETE_FOR_REVIEW</status><title>Add Minimap functionality (Full `MinimapWindow`, Tile Rendering, Click Navigation, View Sync).</title><detailed_spec_file>tasks_definitions/Task90.md</detailed_spec_file></task>
    <task id="Task91"><status>COMPLETE_FOR_REVIEW</status><title>Migrate or recreate `TilesetWindows` functionality (Advanced Tileset Definition/Editing UI).</title><detailed_spec_file>tasks_definitions/Task91.md</detailed_spec_file></task>
    <task id="Task92"><status>PENDING</status><title>Port `SpawnItem` code from Map Display (Finalizing Spawn Visualization & Attribute Reflection).</title><detailed_spec_file>tasks_definitions/Task92.md</detailed_spec_file></task>
    <task id="Task93"><status>PENDING</status><title>Create `Project_QT` Tile property dialog (Full Implementation: Editing All Tile Properties, Data Binding, Map Updates).</title><detailed_spec_file>tasks_definitions/Task93.md</detailed_spec_file></task>
    <task id="Task94"><status>PENDING</status><title>Implement and Integrate the `Houses` and `Towns` System (Full Life-Cycle, UI, Map Sync, OTBM/XML).</title><detailed_spec_file>tasks_definitions/Task94.md</detailed_spec_file></task>
    <task id="Task95"><status>PENDING</status><title>Complete and Refine `SelectionBrush` (Full Transformation Logic, Modifiers, `MapDisplay` Interaction).</title><detailed_spec_file>tasks_definitions/Task95.md</detailed_spec_file></task>
    <task id="Task96"><status>PENDING</status><title>Implement Key Forwarding, Navigation, and Input Handling for All Palettes/Dialog Controls (Full UI Polish).</title><detailed_spec_file>tasks_definitions/Task96.md</detailed_spec_file></task>
    <task id="Task97"><status>PENDING</status><title>Integrate Application Settings and Preferences (Full Persistence & Application across all components).</title><detailed_spec_file>tasks_definitions/Task97.md</detailed_spec_file></task>
    <task id="Task98"><status>PENDING</status><title>Migrate 'Ground Border Tool' Automagic (Full Specialized Tool Logic & Integration).</title><detailed_spec_file>tasks_definitions/Task98.md</detailed_spec_file></task>
    <task id="Task99"><status>PENDING</status><title>Migrate any features that network messaging in `LiveSocket` requires in Qt (Data Structures, Packets, Basic Send/Receive Stubs).</title><detailed_spec_file>tasks_definitions/Task99.md</detailed_spec_file></task>
    <task id="Task100"><status>PENDING</status><title>Refactor, Optimize, Test, and Finalize (Systematic Code Review & Polish, Performance, Comprehensive Testing).</title><detailed_spec_file>tasks_definitions/Task100.md</detailed_spec_file></task>
  </task_list>

  <execution_control>
    <info_note>This XML file is used for both defining tasks and tracking their dynamic status. The AI will directly update the 'status' attribute of task elements to reflect 'PENDING', 'COMPLETE_FOR_REVIEW', 'REWORK_REQUESTED', or 'PENDING'. This behavior will be influenced by the chosen approval mode (MANUAL or AUTONOMOUS).</info_note>
    <total_tasks_defined>100</total_tasks_defined>
  </execution_control>

  <!--
    The <workflow_instructions> block describes a general interaction pattern.
    The specific detailed workflow the AI Assistant follows is now in 'master_prompt.txt'.
    This block is kept for human reference to understand the general intent.
  -->
  <workflow_instructions>
    <reference_to_primary_workflow_doc>tasks/master_prompt.txt</reference_to_primary_workflow_doc>
    <step name="ApprovalModeSelection">At startup, AI asks user to select 'MANUAL' or 'AUTONOMOUS' approval mode.</step>
    <step name="TaskIdentification">AI identifies the current task by parsing this XML for the first task with status 'PENDING' or 'REWORK_REQUESTED'.</step>
    <step name="CodeAnalysisAndRefactoring">AI analyzes original code, existing Qt code, and potentially refactors large files into smaller modules before main task implementation, reporting new files. This step adheres to mandate M6.</step>
    <step name="CodeModification">AI directly modifies/creates Qt6 code for the current task within `Project_QT/src` files.</step>
    <step name="SignalReadinessAndStatusUpdate">AI signals task completion, provides a summary, and updates the task's 'status' to 'COMPLETE_FOR_REVIEW' directly in this XML. Behavior then branches based on approval mode:</step>
    <step name="UserReviewActionOrAutonomousApproval">
        - If 'MANUAL': AI awaits user feedback ("PENDING:[TaskID]" or "REWORK:[TaskID] [Feedback]").
        - If 'AUTONOMOUS': AI waits a conceptual short period for any 'REWORK' feedback. If none, AI automatically updates task status to 'PENDING' in this XML and proceeds to the next task without user "PENDING" input.
    </step>
    <step name="ContinuationOrRework">If PENDING (manual or autonomous), AI proceeds to next task. If rework, AI updates status to 'REWORK_REQUESTED' in this XML, directly modifies files to address feedback, then signals readiness by updating status back to 'COMPLETE_FOR_REVIEW' (looping back to 'SignalReadinessAndStatusUpdate' with refined behavior for autonomous mode).</step>
    <step name="LoopUntilAllCompleted">Process repeats until all tasks are 'PENDING' in this XML.</step>
  </workflow_instructions>

  <final_instructions>
    <reference_to_primary_workflow_doc>tasks/master_prompt.txt</reference_to_primary_workflow_doc>
  </final_instructions>

</project_migration_tasks>