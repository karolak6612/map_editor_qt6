# CMakeLists.txt for Task 81 Brush Persistence Test Application
# This file provides build configuration for the comprehensive brush persistence test

cmake_minimum_required(VERSION 3.16)

project(BrushPersistenceTest VERSION 1.0.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find required Qt6 components
find_package(Qt6 REQUIRED COMPONENTS
    Core
    Widgets
    Xml
    Network
    Concurrent
)

# Enable Qt MOC, UIC, and RCC
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTORCC ON)

# Include directories
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/../src
    ${CMAKE_CURRENT_SOURCE_DIR}/../include
)

# Source files for the test application
set(TEST_SOURCES
    ../src/BrushPersistenceTest.cpp
    ../src/BrushPersistence.cpp
    ../src/BrushManager.cpp
    ../src/Brush.cpp
    ../src/GroundBrush.cpp
    ../src/DoorBrush.cpp
    ../src/PixelBrush.cpp
    ../src/CarpetBrush.cpp
    ../src/TableBrush.cpp
    ../src/CreatureBrush.cpp
    ../src/SpawnBrush.cpp
    ../src/WallBrush.cpp
    ../src/WallDecorationBrush.cpp
    ../src/EraserBrush.cpp
    ../src/FlagBrush.cpp
    ../src/Item.cpp
    ../src/ItemType.cpp
    ../src/Tile.cpp
    ../src/Map.cpp
)

# Header files for the test application
set(TEST_HEADERS
    ../src/BrushPersistence.h
    ../src/BrushManager.h
    ../src/Brush.h
    ../src/GroundBrush.h
    ../src/DoorBrush.h
    ../src/PixelBrush.h
    ../src/CarpetBrush.h
    ../src/TableBrush.h
    ../src/CreatureBrush.h
    ../src/SpawnBrush.h
    ../src/WallBrush.h
    ../src/WallDecorationBrush.h
    ../src/EraserBrush.h
    ../src/FlagBrush.h
    ../src/Item.h
    ../src/ItemType.h
    ../src/Tile.h
    ../src/Map.h
)

# Create the test executable
add_executable(BrushPersistenceTest
    ${TEST_SOURCES}
    ${TEST_HEADERS}
)

# Link Qt6 libraries
target_link_libraries(BrushPersistenceTest
    Qt6::Core
    Qt6::Widgets
    Qt6::Xml
    Qt6::Network
    Qt6::Concurrent
)

# Set target properties
set_target_properties(BrushPersistenceTest PROPERTIES
    WIN32_EXECUTABLE TRUE
    MACOSX_BUNDLE TRUE
    OUTPUT_NAME "BrushPersistenceTest"
)

# Compiler-specific options
if(MSVC)
    target_compile_options(BrushPersistenceTest PRIVATE /W4)
else()
    target_compile_options(BrushPersistenceTest PRIVATE -Wall -Wextra -Wpedantic)
endif()

# Debug configuration
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    target_compile_definitions(BrushPersistenceTest PRIVATE DEBUG_BUILD)
endif()

# Install configuration
install(TARGETS BrushPersistenceTest
    BUNDLE DESTINATION .
    RUNTIME DESTINATION bin
)

# Copy Qt6 libraries on Windows
if(WIN32)
    find_program(WINDEPLOYQT_EXECUTABLE windeployqt HINTS ${Qt6_DIR}/../../../bin)
    if(WINDEPLOYQT_EXECUTABLE)
        add_custom_command(TARGET BrushPersistenceTest POST_BUILD
            COMMAND ${WINDEPLOYQT_EXECUTABLE} $<TARGET_FILE:BrushPersistenceTest>
            COMMENT "Deploying Qt6 libraries"
        )
    endif()
endif()

# Test data files
set(TEST_DATA_DIR ${CMAKE_CURRENT_BINARY_DIR}/test_data)
file(MAKE_DIRECTORY ${TEST_DATA_DIR})

# Create sample brush files for testing
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/sample_brushes.xml.in
    ${TEST_DATA_DIR}/sample_brushes.xml
    @ONLY
)

configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/sample_brushes.json.in
    ${TEST_DATA_DIR}/sample_brushes.json
    @ONLY
)

# Build instructions
message(STATUS "")
message(STATUS "Task 81 Brush Persistence Test Build Configuration:")
message(STATUS "  Build Type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  Qt6 Version: ${Qt6_VERSION}")
message(STATUS "  C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "  Test Data Directory: ${TEST_DATA_DIR}")
message(STATUS "")
message(STATUS "To build and run the test:")
message(STATUS "  mkdir build && cd build")
message(STATUS "  cmake ..")
message(STATUS "  cmake --build .")
message(STATUS "  ./BrushPersistenceTest")
message(STATUS "")
message(STATUS "Test Features:")
message(STATUS "  ✓ XML-based brush serialization/deserialization (wxwidgets compatible)")
message(STATUS "  ✓ JSON-based brush serialization/deserialization (modern format)")
message(STATUS "  ✓ User-defined brush support with custom properties")
message(STATUS "  ✓ Brush state persistence and restoration")
message(STATUS "  ✓ File format detection and migration")
message(STATUS "  ✓ Integration with BrushManager for seamless operation")
message(STATUS "  ✓ Comprehensive test suite with interactive UI")
message(STATUS "  ✓ Auto-save and backup functionality")
message(STATUS "  ✓ Brush collection management")
message(STATUS "  ✓ File validation and dependency resolution")
message(STATUS "")
